// Mocks generated by Mockito 5.4.2 from annotations
// in recipe_app/test/bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:recipe_app/core/utils/error_response.dart' as _i5;
import 'package:recipe_app/modules/recipe/data/datasource/api/model/response/freezer_model.dart'
    as _i11;
import 'package:recipe_app/modules/recipe/data/datasource/api/model/response/recipe_model.dart'
    as _i12;
import 'package:recipe_app/modules/recipe/data/datasource/api/recipe_service.dart'
    as _i10;
import 'package:recipe_app/modules/recipe/domain/entities/ingredient_entity.dart'
    as _i6;
import 'package:recipe_app/modules/recipe/domain/entities/recipe_entity.dart'
    as _i7;
import 'package:recipe_app/modules/recipe/domain/repository.dart' as _i3;
import 'package:recipe_app/modules/recipe/domain/usecase/filter_ingredients_usecase.dart'
    as _i9;
import 'package:recipe_app/modules/recipe/domain/usecase/get_ingredients_usecase.dart'
    as _i8;
import 'package:ruqe/ruqe.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RecipeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeRepository extends _i1.Mock implements _i3.RecipeRepository {
  MockRecipeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ErrorResponse, _i6.FreezerEntity>> getFreezer() =>
      (super.noSuchMethod(
        Invocation.method(
          #getFreezer,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ErrorResponse, _i6.FreezerEntity>>.value(
                _FakeEither_0<_i5.ErrorResponse, _i6.FreezerEntity>(
          this,
          Invocation.method(
            #getFreezer,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ErrorResponse, _i6.FreezerEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.ErrorResponse, _i7.RecipeEntity>> getRecipe(
          String? ingredients) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecipe,
          [ingredients],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ErrorResponse, _i7.RecipeEntity>>.value(
                _FakeEither_0<_i5.ErrorResponse, _i7.RecipeEntity>(
          this,
          Invocation.method(
            #getRecipe,
            [ingredients],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ErrorResponse, _i7.RecipeEntity>>);
}

/// A class which mocks [IngredientUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientUsecase extends _i1.Mock implements _i8.IngredientUsecase {
  MockIngredientUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ErrorResponse, _i6.FreezerEntity>> execute() =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ErrorResponse, _i6.FreezerEntity>>.value(
                _FakeEither_0<_i5.ErrorResponse, _i6.FreezerEntity>(
          this,
          Invocation.method(
            #execute,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ErrorResponse, _i6.FreezerEntity>>);
}

/// A class which mocks [FilterIngredientUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilterIngredientUsecase extends _i1.Mock
    implements _i9.FilterIngredientUsecase {
  MockFilterIngredientUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i6.Ingredients> filterByDate(
    List<_i6.Ingredients>? ingredients,
    DateTime? filterDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterByDate,
          [
            ingredients,
            filterDate,
          ],
        ),
        returnValue: <_i6.Ingredients>[],
      ) as List<_i6.Ingredients>);
}

/// A class which mocks [RecipeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeService extends _i1.Mock implements _i10.RecipeService {
  MockRecipeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i11.FreezerResponse>> getIngredients() =>
      (super.noSuchMethod(
        Invocation.method(
          #getIngredients,
          [],
        ),
        returnValue: _i4.Future<List<_i11.FreezerResponse>>.value(
            <_i11.FreezerResponse>[]),
      ) as _i4.Future<List<_i11.FreezerResponse>>);
  @override
  _i4.Future<List<_i12.RecipeModel>> getRecipe(String? ingredients) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecipe,
          [ingredients],
        ),
        returnValue:
            _i4.Future<List<_i12.RecipeModel>>.value(<_i12.RecipeModel>[]),
      ) as _i4.Future<List<_i12.RecipeModel>>);
}
